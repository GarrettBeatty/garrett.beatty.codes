---
import '../styles/subway.css';
import '../styles/subway-tiles.css';
import '../styles/subway-elements.css';
import { ViewTransitions } from 'astro:transitions';
import ArrivalBoard from '../components/ArrivalBoard.astro';

interface Props {
  title: string;
}

const { title } = Astro.props;

// Get current page for service status
const currentPath = Astro.url.pathname;
const pageName = currentPath === '/' ? 'Home' : 
                 currentPath.split('/')[1].charAt(0).toUpperCase() + 
                 currentPath.split('/')[1].slice(1);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Garrett Beatty's Personal Website" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions fallback="none" />
    
    <!-- Add subway sounds -->
    <audio id="subway-doors" class="subway-sound" preload="auto">
      <source src="/sounds/subway-doors.mp3" type="audio/mpeg">
    </audio>
  </head>
  <body>
    <div class="subway-container">
      <header class="subway-header" transition:persist>
        <div class="mta-logo">GB</div>
        <nav class="subway-nav">
          <a href="/" class="subway-line line-yellow" data-internal-link data-astro-prefetch="hover">Home</a>
          <a href="/projects" class="subway-line line-blue" data-internal-link data-astro-prefetch="hover">Projects</a>
          <a href="/publications" class="subway-line line-green" data-internal-link data-astro-prefetch="hover">Publications</a>
          <a href="/GarrettBeattyResume.pdf" class="subway-line line-red">Resume</a>
        </nav>
      </header>

      <ArrivalBoard stationName={pageName} />

      <main class="subway-main">
        <slot />
      </main>

      <footer class="subway-footer" transition:persist>
        <div class="subway-track"></div>
        <div class="service-status-container">
          <span class="service-status status-good">All Lines Operating Normally</span>
          <button class="emergency-intercom">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 2v20M2 12h20"/>
            </svg>
            Emergency Contact
          </button>
        </div>
        <div class="subway-info">
          Â© 2024 Garrett Beatty. All rights reserved.
        </div>
      </footer>
    </div>
  </body>
</html>

<style>
  .subway-container {
    overflow-x: hidden;
    position: relative;
  }

  .subway-main {
    position: relative;
  }
</style>

<script>
  import gsap from 'gsap';
  import { Flip } from 'gsap/Flip';

  gsap.registerPlugin(Flip);

  let isTransitioning = false;
  let currentPath = window.location.pathname;
  let nextPageContent = null;

  // Preload function
  async function preloadPage(url) {
    try {
      const response = await fetch(url);
      const text = await response.text();
      const parser = new DOMParser();
      return parser.parseFromString(text, 'text/html');
    } catch (error) {
      console.error('Error preloading page:', error);
      return null;
    }
  }

  // Handle internal navigation
  document.addEventListener('click', async (e) => {
    const link = e.target.closest('a[data-internal-link]');
    if (link && link.href) {
      const newPath = new URL(link.href).pathname;
      // Only trigger transition if we're navigating to a different page
      if (newPath !== currentPath) {
        e.preventDefault();
        startPageTransition(link.href);
      } else {
        // Prevent default when clicking current page
        e.preventDefault();
      }
    }
  });

  // Preload pages on hover
  document.querySelectorAll('a[data-internal-link]').forEach(link => {
    link.addEventListener('mouseenter', () => {
      const url = link.href;
      if (url !== window.location.href) {
        preloadPage(url);
      }
    });
  });

  async function startPageTransition(newUrl) {
    if (isTransitioning) return;
    isTransitioning = true;

    // Get all current cards and title
    const currentCards = document.querySelectorAll('.project-card, .publication-card');
    const currentTitle = document.querySelector('.station-name');
    
    // Create a FLIP state
    const state = Flip.getState([...currentCards, currentTitle]);

    // Start preloading the next page
    preloadPage(newUrl);

    // Animate title flipping out
    gsap.to(currentTitle, {
      rotationX: 90,
      opacity: 0,
      duration: 0.4,
      ease: "power2.in"
    });

    // Animate all cards flipping out
    await gsap.to(currentCards, {
      rotationX: 90,
      opacity: 0,
      duration: 0.6,
      stagger: 0.1,
      ease: "power2.in",
      delay: 0.2 // Start after title begins flipping
    });

    // Navigate to new page
    window.location.href = newUrl;
  }

  // Handle transition events
  document.addEventListener('astro:before-preparation', (e) => {
    // Preload the next page's content
    preloadPage(e.to);
  });

  document.addEventListener('astro:before-swap', () => {
    if (isTransitioning) {
      document.body.classList.add('transition-active');
    }
  });

  document.addEventListener('astro:after-swap', () => {
    // Get new cards and title
    const newCards = document.querySelectorAll('.project-card, .publication-card');
    const newTitle = document.querySelector('.station-name');
    
    // Set initial state for new elements
    gsap.set([newCards, newTitle], {
      rotationX: -90,
      opacity: 0
    });

    // Ensure GSAP animations are properly initialized
    gsap.registerPlugin(Flip);

    // Animate title flipping in
    gsap.to(newTitle, {
      rotationX: 0,
      opacity: 1,
      duration: 0.4,
      ease: "power2.out"
    });

    // Animate new cards flipping in
    gsap.to(newCards, {
      rotationX: 0,
      opacity: 1,
      duration: 0.6,
      stagger: 0.1,
      delay: 0.2, // Start after title begins flipping
      ease: "power2.out",
      onComplete: () => {
        isTransitioning = false;
        document.body.classList.remove('transition-active');
      }
    });

    // Play doors sound
    setTimeout(() => {
      const doors = document.getElementById('subway-doors');
      doors?.play();
    }, 300);

    currentPath = window.location.pathname;
  });

  // Handle browser back/forward navigation
  window.addEventListener('popstate', () => {
    const newPath = window.location.pathname;
    if (newPath !== currentPath) {
      startPageTransition(window.location.href);
    }
  });

  // Emergency intercom handler
  document.querySelector('.emergency-intercom')?.addEventListener('click', () => {
    window.location.href = 'https://www.linkedin.com/in/garrett-beatty/';
  });

  // Preload initial pages
  window.addEventListener('load', () => {
    document.querySelectorAll('a[data-internal-link]').forEach(link => {
      if (link.href !== window.location.href) {
        preloadPage(link.href);
      }
    });
  });
</script> 