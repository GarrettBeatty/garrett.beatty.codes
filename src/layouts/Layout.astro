---
import '../styles/subway.css';
import '../styles/subway-tiles.css';
import '../styles/subway-elements.css';
import { ViewTransitions } from 'astro:transitions';
import SubwayCar from '../components/SubwayCar.astro';
import ArrivalBoard from '../components/ArrivalBoard.astro';

interface Props {
  title: string;
}

const { title } = Astro.props;

// Get current page for service status
const currentPath = Astro.url.pathname;
const pageName = currentPath === '/' ? 'Home' : 
                 currentPath.split('/')[1].charAt(0).toUpperCase() + 
                 currentPath.split('/')[1].slice(1);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Garrett Beatty's Personal Website" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions fallback="none" />
    
    <!-- Add subway sounds -->
    <audio id="subway-chime" class="subway-sound">
      <source src="/sounds/subway-chime.mp3" type="audio/mpeg">
    </audio>
    <audio id="subway-doors" class="subway-sound">
      <source src="/sounds/subway-doors.mp3" type="audio/mpeg">
    </audio>
  </head>
  <body>
    <div class="subway-container">
      <header class="subway-header" transition:persist>
        <div class="mta-logo">GB</div>
        <nav class="subway-nav">
          <a href="/" class="subway-line line-yellow" data-internal-link>Home</a>
          <a href="/projects" class="subway-line line-blue" data-internal-link>Projects</a>
          <a href="/publications" class="subway-line line-green" data-internal-link>Publications</a>
          <a href="/GarrettBeattyResume.pdf" class="subway-line line-red">Resume</a>
        </nav>
      </header>

      <ArrivalBoard stationName={pageName} />

      <main class="subway-main" transition:animate="slide">
        <slot />
      </main>

      <div id="subway-car-container"></div>

      <footer class="subway-footer" transition:persist>
        <div class="subway-track"></div>
        <div class="service-status-container">
          <span class="service-status status-good">All Lines Operating Normally</span>
          <button class="emergency-intercom">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 2v20M2 12h20"/>
            </svg>
            Emergency Contact
          </button>
        </div>
        <div class="subway-info">
          Â© 2024 Garrett Beatty. All rights reserved.
        </div>
      </footer>
    </div>
  </body>
</html>

<style>
  .subway-container {
    overflow-x: hidden;
    position: relative;
  }

  .subway-main {
    transition: transform 1s cubic-bezier(0.34, 1.56, 0.64, 1);
    transform: translateX(0);
  }

  :global(.transition-active) .subway-main {
    transform: translateX(100vw);
  }

  .service-status-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
    margin: 2rem 0;
  }
</style>

<script>
  let isTransitioning = false;
  let currentPath = window.location.pathname;

  // Sound effects
  const subwayChime = document.getElementById('subway-chime') as HTMLAudioElement;
  const subwayDoors = document.getElementById('subway-doors') as HTMLAudioElement;

  function createSubwayCar() {
    const car = document.createElement('div');
    car.innerHTML = `
      <svg viewBox="0 0 400 120" class="car">
        <rect x="20" y="20" width="360" height="80" rx="8" class="body" fill="#FFD700" stroke="#333" stroke-width="2"/>
        <rect x="35" y="30" width="40" height="35" rx="4" class="window" fill="#1a1a1a"/>
        <rect x="85" y="30" width="40" height="35" rx="4" class="window" fill="#1a1a1a"/>
        <rect x="135" y="30" width="40" height="35" rx="4" class="window" fill="#1a1a1a"/>
        <rect x="185" y="30" width="40" height="35" rx="4" class="window" fill="#1a1a1a"/>
        <rect x="235" y="30" width="40" height="35" rx="4" class="window" fill="#1a1a1a"/>
        <rect x="285" y="30" width="40" height="35" rx="4" class="window" fill="#1a1a1a"/>
        <rect x="325" y="30" width="40" height="35" rx="4" class="window" fill="#1a1a1a"/>
        <circle cx="200" cy="40" r="15" fill="#333"/>
        <text x="200" y="45" text-anchor="middle" fill="#FFD700" font-size="14" font-weight="bold">GB</text>
      </svg>
    `;
    car.style.cssText = `
      position: fixed;
      top: 50%;
      transform: translate(-420px, -50%);
      width: 400px;
      z-index: 1000;
      pointer-events: none;
      transition: transform 2s cubic-bezier(0.34, 1.56, 0.64, 1);
    `;
    return car;
  }

  function startTransition() {
    isTransitioning = true;
    document.body.classList.add('transition-active');
    const container = document.getElementById('subway-car-container');
    const car = createSubwayCar();
    container.appendChild(car);
    
    // Play sound effects
    subwayChime?.play();
    setTimeout(() => subwayDoors?.play(), 500);
    
    requestAnimationFrame(() => {
      car.style.transform = `translate(calc(100vw + 420px), -50%)`;
    });
  }

  function endTransition() {
    document.body.classList.remove('transition-active');
    isTransitioning = false;
    currentPath = window.location.pathname;
    const container = document.getElementById('subway-car-container');
    container.innerHTML = '';
  }

  // Handle internal navigation
  document.addEventListener('click', (e) => {
    const link = e.target.closest('a[data-internal-link]');
    if (link && link.href) {
      const newPath = new URL(link.href).pathname;
      // Only trigger transition if we're navigating to a different page
      if (newPath !== currentPath) {
        e.preventDefault();
        startTransition();
        setTimeout(() => {
          window.location.href = link.href;
        }, 1000);
      } else {
        // Prevent default when clicking current page
        e.preventDefault();
      }
    }
  });

  // Handle transition events
  document.addEventListener('astro:before-swap', () => {
    if (isTransitioning) {
      document.body.classList.add('transition-active');
    }
  });

  document.addEventListener('astro:after-swap', () => {
    requestAnimationFrame(() => {
      setTimeout(endTransition, 1000);
    });
  });

  // Handle browser back/forward navigation
  window.addEventListener('popstate', () => {
    const newPath = window.location.pathname;
    if (newPath !== currentPath) {
      startTransition();
    }
  });

  // Emergency intercom handler
  document.querySelector('.emergency-intercom')?.addEventListener('click', () => {
    window.location.href = 'https://www.linkedin.com/in/garrett-beatty/';
  });
</script> 